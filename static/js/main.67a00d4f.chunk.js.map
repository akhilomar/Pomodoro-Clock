{"version":3,"sources":["SetTimer.js","Timer.js","Controls.js","App.js","serviceWorker.js","index.js"],"names":["SetTimer","className","id","this","props","type","onClick","handleClick","value","Component","Timer","mode","time","Controls","handlePlayPause","active","handleReset","App","handleSetTimers","inc","state","setState","breakValue","sessionValue","touched","audio","pause","currentTime","clearInterval","pomodoro","setInterval","prevProps","prevState","play","moment","utcOffset","format","src","ref","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67a00d4f.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './SetTimer.css';\r\n\r\nclass SetTimer extends Component{\r\n    render(){\r\n        return(\r\n        <div className=\"SetTimer\">\r\n            <h1 id={`${this.props.type}-label`}>{`${this.props.type==='session'?'Session' : 'Break'} Length`}</h1>\r\n            <div className='SetTimer-controls'>\r\n            <button id={`${this.props.type}-decrement`} onClick={()=>this.props.handleClick(false, `${this.props.type}Value`)}>&darr;</button>\r\n            <h1 id={`${this.props.type}-length`}>{this.props.value}</h1>\r\n            <button id={`${this.props.type}-increment`} onClick={()=>this.props.handleClick(true, `${this.props.type}Value`)}>&uarr;</button>\r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default SetTimer;","import React,{Component} from 'react';\r\nimport './Timer.css'\r\nclass Timer extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Timer\">\r\n                <h1 id='timer-label'>{this.props.mode==='session'?'Session':'Break'}</h1>\r\n                <h1 id=\"time-left\">{this.props.time}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Timer;","import React,{Component} from 'react';\r\nimport './Controls.css';  \r\n\r\nclass Controls extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"Controls\">\r\n                <button id='start_stop' onClick={this.props.handlePlayPause}>\r\n                    { this.props.active? <span>&#10074;&#10074;</span>:<span>&#9658;</span>}\r\n                </button>\r\n                <button id=\"reset\" onClick={this.props.handleReset}>&#8635;</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Controls;","import React,{Component} from 'react';\nimport './App.css';\nimport SetTimer from './SetTimer';\nimport Timer from './Timer';\nimport Controls from './Controls'\nimport './SetTimer.css';\nimport moment from 'moment/moment.js'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state={\n        breakValue:5,\n        sessionValue: 25,\n        mode: 'session',\n        time: 25*60*1000,\n        active: false,\n        touched: false\n    }\n  }\n\n  componentDidUpdate(prevProps,prevState){\n    if(prevState.time===0 && prevState.mode==='session'){\n      this.setState({\n        time: this.state.breakValue*60*1000,\n        mode:'break'\n      })\n      this.audio.play();\n    }\n    if(prevState.time===0 && prevState.mode==='break'){\n      this.setState({\n        time: this.state.sessionValue*60*1000,\n        mode:'session'\n      })\n      this.audio.play();\n    }\n  }\n\n  handleSetTimers=(inc,type)=>{\n    if(this.state[type]===60 && inc) return\n    if(this.state[type]===1 && !inc) return\n    this.setState({[type]: this.state[type]+(inc?1:-1)})  \n  }\n  handleReset=()=>{\n    this.setState({\n      breakValue:5,\n      sessionValue:25,\n      time: 25*60*1000,\n      mode:'session',\n      touched: false,\n      active: false\n    })\n    this.audio.pause();\n    this.audio.currentTime=0;\n    clearInterval(this.pomodoro)\n  }\n  handlePlayPause=()=>{\n    if(this.state.active){\n      clearInterval(this.pomodoro)\n      this.setState({\n        active: false\n      })\n    }\n    else{\n      if(this.state.touched){\n        this.pomodoro=setInterval(()=>this.setState({time: this.state.time-1000}),1000)\n        this.setState({active: true})\n      }\n      else{\n          this.setState({time:this.state.sessionValue*60*1000, \n            touched: true,\n            active:true}\n          \n          )\n          this.pomodoro=setInterval(()=>this.setState({time: this.state.time-1000}),1000)\n      }\n \n      \n    }\n    \n  \n  }\nrender(){\n  return(\n    <div>\n      <div className=\"header\">\n      Pomodoro Clock\n      </div>\n      <div className=\"pos\">\n      <div className=\"settings\">\n        <SetTimer type='break' value={this.state.breakValue} handleClick={this.handleSetTimers}/>\n        <SetTimer type='session' value={this.state.sessionValue} handleClick={this.handleSetTimers}/>\n      </div>\n      <div className=\"ses\">\n        <Timer mode={this.state.mode} time={moment(this.state.time).utcOffset(120).format('mm:ss')}/>\n        <Controls active={this.state.active} handleReset={this.handleReset} handlePlayPause={this.handlePlayPause}/>\n        <audio id='beep' src='https://goo.gl/65cBl1' ref={ref=>this.audio=ref}></audio>\n        </div>\n      </div>\n    </div>\n  )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}